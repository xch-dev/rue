// Test file for advanced autocomplete features

// Test 1: Function parameters should be visible in function body
fn test_parameters(param1: Int, param2: String) -> Int {
    // Try autocomplete here - should suggest param1, param2
    param1
}

// Test 2: Local bindings should be visible in their scope
fn test_local_bindings() -> Int {
    let x = 5;
    let y = 10;
    // Try autocomplete here - should suggest x, y
    x + y
}

// Test 3: Shadowing - inner scope should hide outer scope
fn test_shadowing() -> Int {
    let x = 5;
    {
        let x = 10;
        // Try autocomplete here - should only suggest the inner x
        x
    }
}

// Test 4: Nested scopes
fn test_nested_scopes() -> Int {
    let outer = 1;
    {
        let middle = 2;
        {
            let inner = 3;
            // Try autocomplete here - should suggest inner, middle, outer
            inner + middle + outer
        }
    }
}

// Test 5: Multiple local bindings
fn test_multiple_bindings() -> Int {
    let first_var = 1;
    let second_var = 2;
    let third_var = 3;
    // Try autocomplete here - should suggest all three variables
    first_var
}

// Test 6: Parameters and locals together
fn test_mixed(my_param: Int) -> Int {
    let my_local = 5;
    // Try autocomplete here - should suggest both my_param and my_local
    my_param + my_local
}

// Test 7: Stdlib functions should still be available
fn test_stdlib() -> Bytes32 {
    let data = 0x1234;
    // Try autocomplete here - should suggest sha256, tree_hash, etc.
    sha256(data)
}

