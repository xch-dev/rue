fn main(num: Int) -> List<Bytes> {
    fizz_buzz(1, num)
}

fn fizz_buzz(num: Int, limit: Int) -> List<Bytes> {
    let rest = if num == limit {
        nil
    } else {
        fizz_buzz(num + 1, limit)
    };
    (fizz_buzz_value(num), rest)
}

fn fizz_buzz_value(num: Int) -> Bytes {
    if num % 3 == 0 && num % 5 == 0 {
        "FizzBuzz"
    } else if num % 3 == 0 {
        "Fizz"
    } else if num % 5 == 0 {
        "Buzz"
    } else {
        integer_to_string(num)
    }
}

fn integer_to_string(num: Int) -> Bytes {
    if num < 0 {
        "-" + integer_to_string(-num)
    } else if num < 10 {
        single_digit_to_string(num)
    } else {
        integer_to_string(num / 10) + single_digit_to_string(num % 10)
    }
}

fn single_digit_to_string(digit: Int) -> Bytes {
    ("0" as Int + digit) as Bytes
}
